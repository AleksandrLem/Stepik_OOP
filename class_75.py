# 1. Реализуйте класс Summator, описывающий объект,
# вычисляющий сумму натуральных чисел от 1 до n:

# 1+2+3+...+n

# При создании экземпляра класс не должен принимать никаких аргументов.
# Класс Summator должен иметь один метод экземпляра:

# total() — метод, принимающий в качестве аргумента целое
# число n и возвращающий сумму целых чисел от 1 до n включительно


# 2. Помимо этого, реализуйте класс SquareSummator,
# наследника класса Summator, описывающий объект,
# вычисляющий сумму квадратов натуральных чисел от 1 до n:

# 1**2+2**2+3**2+...+n**2

# Процесс создания экземпляра класса SquareSummator должен
# совпадать с процессом создания экземпляра класса Summator.

# Класс SquareSummator должен иметь один метод экземпляра:

# total() — метод, принимающий в качестве аргумента целое
# число n и возвращающий сумму квадратов целых чисел от 1 до n включительно


# 3. Также реализуйте класс QubeSummator, наследника класса Summator,
# описывающий объект, вычисляющий сумму кубов
# натуральных чисел от 1 до n:

# 1**3+2**3+3**3+...+n**3

# Процесс создания экземпляра класса QubeSummator должен
# совпадать с процессом создания экземпляра класса Summator.

# Класс QubeSummator должен иметь один метод экземпляра:

# total() — метод, принимающий в качестве аргумента
# целое число n и возвращающий сумму кубов целых чисел от 1 до n включительно


# 4. Наконец, реализуйте класс CustomSummator, наследника класса Summator,
# описывающий объект, вычисляющий сумму произвольных
# степеней натуральных чисел от 1 до n:

# 1**m+2**m+3**m+...+n**m

# При создании экземпляра класс должен принимать один аргумент:

# m — степень чисел в последовательности
# Класс CustomSummator должен иметь один метод экземпляра:

# total() — метод, принимающий в качестве аргумента целое
# число n и возвращающий сумму целых чисел
# в степени m от 1 до n включительно
# Примечание 1. Попытайтесь реализовать классы таким
# образом, чтобы метод total() был определен лишь
# в классе Summator.

class Summator:

    def total(self, n, m=1):
        self.sum_num = 0
        for i in range(1, n+1):
            self.sum_num += i**m
        return self.sum_num


class SquareSummator(Summator):

    def total(self, n, m=2):
        return super().total(n, m)


class QubeSummator(Summator):

    def total(self, n, m=3):
        return super().total(n, m)


class CustomSummator(Summator):

    def __init__(self, m) -> None:
        self.m = m

    def total(self, n):
        return super().total(n, self.m)


summator1 = Summator()
summator2 = CustomSummator(2)
summator3 = CustomSummator(3)

print(summator1.total(3))    # 1 + 2 + 3
print(summator2.total(3))    # 1 + 4 + 9
print(summator3.total(3))    # 1 + 8 + 27
