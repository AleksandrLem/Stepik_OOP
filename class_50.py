# Реализуйте класс Dice, описывающий игральный кубик с определенным
# количеством граней. При создании экземпляра класс должен принимать один аргумент:

# sides — количество граней игрального кубика
# Экземпляр класса Dice должен являться вызываемым объектом и
# не принимать никаких аргументов. При вызове он должен возвращать
# значение случайной грани игрального кубика. Например,
# если кубик имеет 6 граней, экземпляр класса Dice должен
# вернуть случайное число из диапазона [1; 6].

# Примечание 1. Дополнительная проверка данных на корректность не
# требуется. Гарантируется, что реализованный класс используется
# только с корректными данными.

# Примечание 2. Никаких ограничений касательно реализации класса
# Dice нет, она может быть произвольной.

'''Для повторения:

Модуль random

randint(a, b) – принимает два обязательных аргумента “a” и “b” и 
возвращает псевдослучайное число из отрезка [a;b]

random.Randrange() Возвращает случайно выбранное число из последовательности чисел [a; b)

random.random() – возвращает вещественное число из диапазона [0,0 ; 1,0)

random.uniform() – возвращает вещественное число из диапазона [a ; b]

random.seed() – задает начальное значение, каждый рай рандом будет одинаковый

random.shuffle() – принимает на вход список и перемешивает его случайным образом

random.choice() – принимает список, строку, кортеж и возвращает один случайный элемент

random.sample([] , 5) – возвращает несколько уникальных случайных элементов списка, 
строки, кортежа или множества. Аргумент не может быть больше длины значения'''


from random import randint


class Dice:

    def __init__(self, sides) -> None:
        self.sides = sides

    def __call__(self):
        return randint(1, self.sides)


kingdice = Dice(6)

print(kingdice() in [1, 2, 3, 4, 5, 6])
print(kingdice() in [1, 2, 3, 4, 5, 6])
print(kingdice() in [7, 8, 9, 10])
print(kingdice())
